name: postgres_migrations

on:
  workflow_call:

jobs:
  create_migration_scripts:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Create migration scripts
        id: migration_scripts
        # OUTPUT=$(script -q -e -c "pwd")
        # OUTPUT=$(script -q -e -c "az containerapp exec \
        # --name ${{ vars.AZURE_CONTAINERAPP_BACKEND }} \
        # --resource-group ${{vars.AZURE_RESOURCE_GROUP}} \
        # --command \"scripts/postgres_migration_check.sh\""
        run: |
          mkdir -p postgres_migration_check
          script -q -e -c "az containerapp exec \
            --name ${{ vars.AZURE_CONTAINERAPP_BACKEND }} \
            --resource-group ${{vars.AZURE_RESOURCE_GROUP}} \
            --command \"scripts/postgres_migration_create.sh\"" > postgres_migration/create_${{ env.COMMIT_SHA }}.txt
      # TBD: another version below, that includes the migration run artifacts
      - name: Upload migration check artifacts
        uses: actions/upload-artifact@v3
        with:
          name: postgres_migration_results
          path: postgres_migration/create_${{ env.COMMIT_SHA }}.txt
      # Shall I really run it here already or first after pull request is merged?
      # - name: Run the migrations
      #   run: |
      #     mkdir -p postgres_migration_check
      #     script -q -e -c "az containerapp exec \
      #       --name ${{ vars.AZURE_CONTAINERAPP_BACKEND }} \
      #       --resource-group ${{vars.AZURE_RESOURCE_GROUP}} \
      #       --command \"scripts/postgres_migration_run.sh\"" > postgres_migration/run_${{ env.COMMIT_SHA }}.txt
      # - name: Upload migration check artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: postgres_migration_results
      #     path: |
      #       postgres_migration/create_${{ env.COMMIT_SHA }}.txt
      #       postgres_migration/run_${{ env.COMMIT_SHA }}.txt
      - name: Check what directory we are in
        # maybe we need a checkout repo step?
        run: |
          pwd
          ls -la
      - name: Retrieve migration script from log
        run: |
          MIGRATION_SCRIPT_FILENAME=$(tail -n +4 postgres_migration/create_${{ env.COMMIT_SHA }}.txt | head -n 1)
          tail -n +5 postgres_migration/create_${{ env.COMMIT_SHA }}.txt | head -n -2 > $MIGRATION_SCRIPT_FILENAME.sql
      - name: Echo the migration script
        run: |
          cat postgres_migration/create_${{ env.COMMIT_SHA }}.sql
      - name: Commit migration script
        uses: EndBug/add-and-commit@v9
        with:
          add: 'postgres_migration/create_${{ env.COMMIT_SHA }}.sql'
          message: '[migrations] Add migration script for commit ${{ env.COMMIT_SHA }}'
      - name: Echo git status
        run: |
          git status
      # - name: Create a pull request
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     title: "[migrations] for postgres for commit ${{ env.COMMIT_SHA }}"
      #     commit-message: "[migrations] for commit ${{ env.COMMIT_SHA }}"
      #    # branch: "migrations/${{ env.COMMIT_SHA }}" really in doub - let's see what comes out of add and commit?
      #     base: stage
      #     delete-branch: true
      #     labels: "postgres"

      # when the pull request is merged into stage, 
      # we need another "containerize", "deploy_stage"
      # -> which should now result in migrations_check to return 0
      # that would tri